---
import './SkillItem.scss'

import Card from './Card.astro'
import LightDarkImage from './LightDarkImage.astro'
import Touchable from './Touchable'

interface Props {
	name: string
	icon: string
	iconLight?: string
	variant?: 'small' | 'large' | 'large-horz' | 'large-vert'
}

const { name, icon, iconLight, variant = 'small' } = Astro.props
const shouldHaveLabel = ['large', 'large-horz', 'large-vert'].includes(variant)
const shouldHaveLargeIcon = variant === 'large'
---

<Touchable class="item" client:visible>
    <Card class:list={["item", variant === 'large-horz' && 'flex-horz']} flex="~ vert vert-y-center vert-x-center" pad="s" gap="xs">
        <div class="icon-cont">
            <LightDarkImage draggable="false" aria-hidden="true" srcLight={iconLight} src={icon} alt={name} class:list={["icon", shouldHaveLargeIcon && 'large']} />
            <LightDarkImage draggable="false" aria-hidden="true" srcLight={iconLight} src={icon} alt={name} class:list={["icon", "icon-glow", shouldHaveLargeIcon && 'large']} />
        </div>
        {shouldHaveLabel && <span data-variant={variant} aria-hidden="true" class="text-label-medium text">{name}</span>}
    </Card>
</Touchable>

<style lang="scss">
    @use "../styles/breakpoints";

    .item {
        user-select: none;
        width: 100%;
        height: 100%;
        border-radius: var(--rad-sm);
        cursor: default;

        &:active {
            transform: none;
        }
    }

    .text {
        text-align: center;
    }

    .icon-cont {
        display: flex;
        position: relative;
    }

    @media (max-width: breakpoints.$tablet) {
        .text[data-variant="large-horz"] {
            display: none;
        }
    }

    @media (max-width: calc(breakpoints.$tablet - 32px)) {
        .text {
            display: none;
        }
    }
</style>
    